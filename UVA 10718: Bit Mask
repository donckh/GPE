/*Accept by UVA 10718: Bit Mask
Question: Consider you are given a 32-bit unsigned integer N. 
find a minimum mask M such that L ≤ M ≤ U and N OR M is maximum.
Ans:
1. for loop from 31bit to 0bit
2. if l >= ans|(1<<i) > u, continue
3. check !(n & (1<<i)) it is a mask of n or not
4. add it to ans, ans |= (1<<i);
Reference: https://yuihuang.com/uva-10718/
*/

#include <iostream>
using namespace std;
 
unsigned int n, l, u, ans;
 
int main() {
    while (cin >> n >> l >> u){
        ans = 0;
        for (int i = 31; i >= 0; i--){
            if ((ans | (1<<i)) > u) continue;  // 1<<i: left shift i digit, u: upper limit
            if ((ans | (1<<i)) <= l || !(n & (1<<i))){ // !(n & (1<<i): if it is a mask against to n -> added it to ans
                ans |= (1<<i);  // ans = ans + 1<<i in bitwise, mask replaced by larger mask
            }
            /* e.g.: 100 50 60: 0110 0100, 0011 0010, 0011 1100
            1. i>6: continue
            2. i=5: 1<<5 (0010 0000), ((0 | (1<<5)) <= 0011 0010: ans = 1<<5
            3. i=4: 1<<4 (0001 0000), ((1<<5 | (1<<4)) < u; ((1<<5 | (1<<4)) < l; ans = 0011 0000
            4. i=3: 1<<3 (0000 1000), ((0011 0000 | (1<<3)) < u; ((0011 0000 | (1<<3)) > l; !(0110 0100 & (0000 1000) => True); ans = 0011 1000
            5. i=2: 1<<2 (0000 0100), ((0011 1000 | (1<<2)) = u; ((0011 1000 | (1<<2)) > l; !(0110 0100 & (0000 0100) => False);
            6. i=1: 1<<1 (0000 0010), ((0011 1000 | (1<<1)) < u; ((0011 1000 | (1<<1)) > l; !(0110 0100 & (0000 0010) => True); ans = 0011 1010
            7. i=0: 1<<0 (0000 0001), ((0011 1010 | (1<<0)) < u; ((0011 1010 | (1<<0)) > l; !(0110 0100 & (0000 0001) => True); ans = 0011 1011 = 59
            */
        }
        cout << ans << "\n";
    }
}
