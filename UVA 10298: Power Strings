/* Accepted by UVA 10298: Power Strings
Question: find the repeat count of string.
1. initial vector for recording the previous same subpattern part location.
2. while the next char not the same-> go to previous pattern to find again.
3. if it is the same, record+1 in the vector
4. take the repeat pattern length by total_length - repeat record.
5. divide sequence length and repeat pattern.
*/
#include <iostream>
#include <string.h>
#include <vector>
using namespace std;
int main(){
    string word;
    int count=1, pattern=0;
    while(cin>>word && word!="."){
        vector <int> failure(word.length(), 0);
        for(int i=1, j=failure[0]=-1; i<word.length(); ++i){  //++i is faster increment
            while(j>=0 && word[j+1]!=word[i]) j=failure[j];  // 3. e.g.: 6th loop[c]: s[4]!=s[6]: j=f[3]=1, s[2]!=s[6]: j=f[1]=-1; while: goto previous repeat pattern (ababab to abab)
            if(word[j+1]==word[i]) ++j;  //2. if char repeat, ++j  e.g.abababcabababc: 2nd loop: s[0]==s[2] ++j, 3rd loop: s[1]==s[3] ++j;
            failure[i]=j;  //1. save the repeat number to failure[i], f[1]=-1, f[2]=0, f[3]=1
            printf("failure[%d]: %d\n", i, failure[i]);  //failure will increment until last repeat pattern, e.g. 21 length str with 3x7 repeat str, then failure[last] = 14
        }
        int pattern = word.length() - failure[word.length()-1] - 1;  //-1: f+1;  -1: because string start from 0, OR failure start from -1(so - (failure+1))
        printf("%d\n", word.length()/pattern);  //count repeat pattern by divide in total
    }
    return 0;
}
