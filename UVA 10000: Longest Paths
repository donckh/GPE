/* Accepted by UVA 10000: Longest Paths 
Question: find the longest path from given nodes graph
1. 
reference: 
https://knightzone.studio/2016/04/28/3127/uva%EF%BC%9A10000%EF%BC%8Dlongest-paths/
Remark:

*/

#include <iostream>
#include <cstdio>
#include <vector>
#include <queue>
using namespace std;

int findLongestPath( bool map[105][105], vector<int> &distance, int s, int n ){
  distance[s] = 0;
  queue<int> start_node;
  vector<bool> visited(n+1, false);
  start_node.push(s);

  while( !start_node.empty() ){
    int current = start_node.front();  //get start point(s)
    start_node.pop();  //remove start point
    visited[current] = false;

    for( int i = 1 ; i <= n ; ++i ){
      if( map[current][i] && distance[current]+1 > distance[i] ){  //map[current][i]: have path, distance[current]+1 > distance[i]: +1
        distance[i] = distance[current] + 1;
        if( !visited[i] ){
          start_node.push(i);  //push next start node for next while loop
          visited[i] = true;  //next start node=true
        }
      }
    }
  }

  int maxIndex = 1;
  for( int i = 2 ; i <= n ; ++i ){
    if( distance[i] > distance[maxIndex] ){
      maxIndex = i;  //get maxIndex
    }
  }

  return maxIndex;
}

int main(){
  int n;
  int caseNumber = 0;
  while( scanf("%d", &n) != EOF && n != 0 ){
    int start;
    scanf("%d", &start);

    bool map[105][105] = {false};
    int p, q;
    while( scanf("%d%d", &p, &q) != EOF && p != 0 && q != 0 ){
      map[p][q] = true;  //single direction
    }

    vector<int> distance(n+1, 0);
    int final = findLongestPath(map, distance, start, n);
    printf("Case %d: The longest path from %d has length %d, finishing at %d.\n\n", ++caseNumber, start, distance[final], final);
  }

  return 0;
}
