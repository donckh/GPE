/* Accept by UVA 256: Quirksome Squares
Question: find all num of digit n (including less than n) that (x+y)^2=xy
1. num of digit n is xy, length of num x: n/2
2. 2 for loop to find out all x, y combination, if x,y are k digit, store in k
3. index also need to divide to k dimension
4. output number need to -1 as k start from 0
*table store in array, k is digits of one num, 
*%d: show int, %0*d, num: compensate 0 until digit = num
*/


#include <iostream>
using namespace std;
int main(){
    int qs[4][50], idx[4]={0};  //digit idx 0~3 have there own idx number
    for(int i=0;i<10000;++i){  // 2,4,6,8 are combination of i and j, so i~ 4 digits, j~ 4 digits
        for(int j=0;j<10000;++j){
            int digit=10;
            for(int k=0;k<4 ;++k, digit*=10){  // start digit from 2 to 8, means 0~3
                int result = i*digit+j;
                if((i+j)*(i+j)==result && i/digit==0 && j/digit==0)  // for digit 2, only consider i and j have 1 digit, that is total 2 digits.
                    qs[k][idx[k]++] = result;  //store result to dp table
            }
        }
    }
    int n, dig;
    while(scanf("%d",&n)!=EOF){
        dig = n/2-1;
        for(int i=0; i<idx[dig];++i){
            printf("%0*d\n", n, qs[dig][i]);  // compensate 0 as requested
        } 
    }
    return 0;
}
